// Generar palabras similares (clonación)
void ClonaPalabras(char* szPalabraLeida, char szPalabrasSugeridas[][TAMTOKEN], int& iNumSugeridas) {
    iNumSugeridas = 0;
    int len = strlen(szPalabraLeida);

    // Eliminación de caracteres
    for (int i = 0; i < len; i++) {
        char copia[TAMTOKEN];
        strcpy_s(copia, TAMTOKEN, szPalabraLeida);
        memmove(&copia[i], &copia[i + 1], len - i);
        strcpy_s(szPalabrasSugeridas[iNumSugeridas++], TAMTOKEN, copia);
    }

    // Transposición de caracteres
    for (int i = 0; i < len - 1; i++) {
        char copia[TAMTOKEN];
        strcpy_s(copia, TAMTOKEN, szPalabraLeida);
        char temp = copia[i];
        copia[i] = copia[i + 1];
        copia[i + 1] = temp;
        strcpy_s(szPalabrasSugeridas[iNumSugeridas++], TAMTOKEN, copia);
    }

    // Sustitución de caracteres
    for (int i = 0; i < len; i++) {
        for (int j = 0; j < strlen(ALFABETO); j++) {
            char copia[TAMTOKEN];
            strcpy_s(copia, TAMTOKEN, szPalabraLeida);
            copia[i] = ALFABETO[j];
            strcpy_s(szPalabrasSugeridas[iNumSugeridas++], TAMTOKEN, copia);
        }
    }

    // Inserción de caracteres
    for (int i = 0; i <= len; i++) {
        for (int j = 0; j < strlen(ALFABETO); j++) {
            char copia[TAMTOKEN];
            strncpy_s(copia, TAMTOKEN, szPalabraLeida, i);
            copia[i] = ALFABETO[j];
            strcpy_s(&copia[i + 1], TAMTOKEN - i - 1, &szPalabraLeida[i]);
            strcpy_s(szPalabrasSugeridas[iNumSugeridas++], TAMTOKEN, copia);
        }
    }
}
// Obtener la lista de palabras candidatas
void ListaCandidatas(char szPalabrasSugeridas[][TAMTOKEN], int iNumSugeridas, char szPalabras[][TAMTOKEN],
                     int iEstadisticas[], int iNumElementos, char szListaFinal[][TAMTOKEN],
                     int iPeso[], int& iNumLista) {
    iNumLista = 0;
    for (int i = 0; i < iNumSugeridas; i++) {
        for (int j = 0; j < iNumElementos; j++) {
            if (strcmp(szPalabrasSugeridas[i], szPalabras[j]) == 0) {
                int duplicado = 0;
                for (int k = 0; k < iNumLista; k++) {
                    if (strcmp(szListaFinal[k], szPalabras[j]) == 0) {
                        duplicado = 1;
                        break;
                    }
                }
                if (!duplicado) {
                    strcpy_s(szListaFinal[iNumLista], TAMTOKEN, szPalabras[j]);
                    iPeso[iNumLista] = iEstadisticas[j];
                    iNumLista++;
                }
            }
        }
    }

    // Ordenar la lista final por peso descendente
    for (int i = 0; i < iNumLista - 1; i++) {
        for (int j = i + 1; j < iNumLista; j++) {
            if (iPeso[i] < iPeso[j]) {
                int tempPeso = iPeso[i];
                iPeso[i] = iPeso[j];
                iPeso[j] = tempPeso;

                char tempPalabra[TAMTOKEN];
                strcpy_s(tempPalabra, TAMTOKEN, szListaFinal[i]);
                strcpy_s(szListaFinal[i], TAMTOKEN, szListaFinal[j]);
                strcpy_s(szListaFinal[j], TAMTOKEN, tempPalabra);
            }
        }
    }
}